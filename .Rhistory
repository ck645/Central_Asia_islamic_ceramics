"#CC6677", "#882255", "#44AA99", "#117733" )) +
coord_cartesian(xlim = c(0, 42), ylim = c(0, 42)) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black", linewidth = 1, linetype = 1)
)
ggsave(filename = "./Figures/Figure9a.jpg", plot = combined_plot_Al2O3, width = 8, height = 6, dpi = 300)
View(Comp_Glaze_transparent)
# Define the folder path containing all the CSV files
folder_path <- "./Data/comparative_EDS_data"
# Get a list of all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "*.csv", full.names = TRUE)
## joining comparative datasets
to_num <- function(x) {
x <- gsub(",", "", x)
x <- gsub("%", "", x)
x <- gsub("[^0-9eE.+\\-]", "", x)
suppressWarnings(as.numeric(x))
}
# selecting non-oxide metadata
factor_columns   <- c("Sample","Site","Region","Instrument","Glaze_or_slip_color",
"Component","Ware","Incision","LIA Group","Provenance")
metadata_columns <- c(factor_columns, "Date","Count", "Surface")
#scanning files for common oxides
all_oxides <- character(0)
for (file_path in csv_files) {
message(paste("Scanning columns in:", file_path))
df <- read.csv(file_path, check.names = FALSE, stringsAsFactors = FALSE)
df <- df[, colnames(df) != "", drop = FALSE]  # drop empty-name columns
oxides_here <- setdiff(colnames(df), c(metadata_columns, "Total"))
all_oxides <- union(all_oxides, oxides_here)
}
oxide_columns_master <- sort(all_oxides)
# process, align, and create a normalized dataset
raw_data_list <- list()
normalized_data_list <- list()
for (file_path in csv_files) {
message(paste("Processing file:", file_path))
samples <- read.csv(file_path, check.names = FALSE, stringsAsFactors = FALSE)
samples <- samples[, colnames(samples) != "", drop = FALSE]
for (col in factor_columns) if (col %in% colnames(samples)) samples[[col]] <- as.character(samples[[col]])
keep_cols <- unique(c(metadata_columns, oxide_columns_master, "Total"))
samples <- samples[, intersect(keep_cols, colnames(samples)), drop = FALSE]
missing_oxides <- setdiff(oxide_columns_master, colnames(samples))
if (length(missing_oxides)) for (m in missing_oxides) samples[[m]] <- NA_real_
ordered_columns <- c(
metadata_columns[metadata_columns %in% colnames(samples)],
oxide_columns_master,
intersect("Total", colnames(samples))
)
samples <- samples[, ordered_columns, drop = FALSE]
numeric_targets <- intersect(c(oxide_columns_master, "Total"), colnames(samples))
samples[numeric_targets] <- lapply(samples[numeric_targets], to_num)
raw_data_list[[file_path]] <- samples
normalized_samples <- samples
for (col in numeric_targets) normalized_samples[[col]] <- to_num(normalized_samples[[col]])
if (!"Total" %in% colnames(normalized_samples)) {
normalized_samples$Total <- rowSums(normalized_samples[, oxide_columns_master, drop = FALSE], na.rm = TRUE)
} else {
bad_total <- is.na(normalized_samples$Total) | !is.finite(normalized_samples$Total) | normalized_samples$Total <= 0
fallback  <- rowSums(normalized_samples[, oxide_columns_master, drop = FALSE], na.rm = TRUE)
normalized_samples$Total[bad_total] <- fallback[bad_total]
}
normalized_samples <- normalized_samples[!is.na(normalized_samples$Total) & normalized_samples$Total > 0, , drop = FALSE]
if (nrow(normalized_samples) > 0) {
for (col in oxide_columns_master) {
normalized_samples[[col]] <- (normalized_samples[[col]] * 100) / normalized_samples$Total
}
row_sums <- rowSums(normalized_samples[, oxide_columns_master, drop = FALSE], na.rm = TRUE)
cf <- 100 / row_sums
cf[!is.finite(cf)] <- 1
for (col in oxide_columns_master) {
normalized_samples[[col]] <- normalized_samples[[col]] * cf
}
normalized_samples$Total <- 100
round_cols <- intersect(c(oxide_columns_master, "Total"), colnames(normalized_samples))
normalized_samples[round_cols] <- lapply(normalized_samples[round_cols], function(v) signif(v, 3))
}
normalized_data_list[[file_path]] <- normalized_samples
}
comparative_raw_data         <- dplyr::bind_rows(raw_data_list)
comparative_normalized_data  <- dplyr::bind_rows(normalized_data_list)
### Cleaning data
comparative_normalized_data$Ware <- as.factor(comparative_normalized_data$Ware)
comparative_normalized_data$Provenance <- as.factor(comparative_normalized_data$Provenance)
# renaming same paste compositional groups
comparative_normalized_data <- comparative_normalized_data %>%
mutate(
Provenance = case_when(
Provenance %in% c("TAZ", "KAZ3") ~ "TAZ - Group 3",
TRUE ~ as.character(Provenance)
),
Provenance = factor(Provenance)
)
# examining samples distribution by Ware
unique_samples_per_Ware <- tapply(
comparative_normalized_data$Sample,
comparative_normalized_data$Ware,
function(x) length(unique(x))
)
unique_samples_per_Ware <- data.frame(
Ware = names(unique_samples_per_Ware),
unique_sample_count = as.integer(unique_samples_per_Ware),
row.names = NULL
)
unique_samples_per_Ware
# examining samples distribution by Site
unique_samples_per_Site <- tapply(
comparative_normalized_data$Sample,
comparative_normalized_data$Site,
function(x) length(unique(x))
)
unique_samples_per_Site <- data.frame(
Site = names(unique_samples_per_Site),
unique_sample_count = as.integer(unique_samples_per_Site),
row.names = NULL
)
unique_samples_per_Site
Comp_Glaze <- filter(comparative_normalized_data, `Component` %in% c('Glaze'))
Comp_Glaze <- Comp_Glaze %>% filter(!Glaze_or_slip_color == "Weathered")
Comp_slip <- filter(comparative_normalized_data, `Component` %in% c('White Slip'))
# calculate mean compositions for samples with multiple measurements
Comp_Glaze <- Comp_Glaze %>%
group_by(Sample, Site, Region, Glaze_or_slip_color, Ware, Provenance) %>%
summarise(
across(all_of(oxide_columns_master), ~ mean(.x, na.rm = TRUE)),
Count = sum(Count, na.rm = TRUE),
.groups = "drop"
)
Comp_slip <- Comp_slip %>%
group_by(Sample, Site, Region, Glaze_or_slip_color, Ware, Provenance) %>%
summarise(
across(all_of(oxide_columns_master), ~ mean(.x, na.rm = TRUE)),
Count = sum(Count, na.rm = TRUE),
.groups = "drop"
)
# clean averaged data
Comp_Glaze <- Comp_Glaze %>%
rename_with(~ gsub("_Mean$", "", .x), ends_with("_Mean")) %>%
mutate(
alkali = rowSums(select(., Na2O, MgO, Al2O3, K2O, CaO), na.rm = TRUE),
PbO    = coalesce(PbO, 1e-5)
)
opaque_set       <- c("Alkali", "Ishkor", "Lustreware", "Opaque")
transparent_set  <- c("Slipware - Qarakhanid", "Slipware - Samanid", "Slipware", "Splashed", "Underglaze", "Monochrome")
other_set        <- c("Kiln Furniture", "Undetermined", "Unknown")
Comp_Glaze <- Comp_Glaze %>%
mutate(
Ware_type = case_when(
Ware %in% opaque_set      ~ "Opaque",
Ware %in% transparent_set ~ "Transparent",
Ware %in% other_set       ~ "Other",
TRUE                      ~ "Other"   # fallback for any unexpected labels
),
Ware_type = factor(Ware_type, levels = c("Opaque","Transparent","Other"))
)
unique_glaze_type_per_Site <- Comp_Glaze %>%
group_by(Site, Ware_type) %>%
summarise(unique_sample_count = n_distinct(Sample)) %>%
ungroup()
print(unique_glaze_type_per_Site, n=36)
write.csv(Comp_Glaze, "./Data/Comp_Glaze.csv", row.names = FALSE)
write.csv(Comp_slip, "./Data/Comp_Slip.csv", row.names = FALSE)
Comp_glaze_ternary <- ggtern(
data = Comp_Glaze, aes(x = PbO, y = SiO2, z = alkali,
color = Ware, shape = Region)) +
geom_point(size = 2.5, alpha = 0.7, stroke = 0.5) +
labs(
L = "PbO (%)",
T = "SiO2 (%)",
R = "Alkali (%)"
) +
scale_shape_manual(name = "Region", values = c(15,1,2,3,8,10,6,17)) +
scale_color_manual(name = "Ware", values = c("#1F77B4", "#FF7F0E",  "#2CA02C",  "#D62728", "#9467BD",
"#8C564B", "#E377C2", "#7F7F7F", "#BCBD22", "#17BECF", "#000000", "#AEC7E8", "#FFBB78")) +
theme(
legend.position = "right",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
tern.panel.background = element_rect(fill = "transparent", color = NA),
tern.plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(hjust = 0.5),
tern.axis.line.T = element_line(color = "black", size = 1.2),
tern.axis.line.L = element_line(color = "black", size = 1.2),
tern.axis.line.R = element_line(color = "black", size = 1.2),
tern.panel.grid.major.T = element_blank(),
tern.panel.grid.major.L = element_blank(),
tern.panel.grid.major.R = element_blank(),
tern.panel.grid.minor.T = element_blank(),
tern.panel.grid.minor.L = element_blank(),
tern.panel.grid.minor.R = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm")
)
png(filename = "./Supplementary_materials/supplementary_figures/Comp_glaze_ternary.png", width = 3600, height = 2400, res=300)
plot(Comp_glaze_ternary)
dev.off()
Comp_glaze_ternary_ware_type <- ggtern(
data = Comp_Glaze, aes(x = PbO, y = SiO2, z = alkali,
color = Ware_type, shape = Region)) +
geom_point(size = 2.5, alpha = 0.7, stroke = 0.5) +
labs(
L = "PbO (%)",
T = "SiO2 (%)",
R = "Alkali (%)"
) +
scale_shape_manual(name = "Region", values = c(15,1,2,3,8,10,6,17)) +
scale_color_manual(name = "Ware Type", values = c("#1F77B4","#FF7F0E","#000000")) +
theme(
legend.position = "right",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
tern.panel.background = element_rect(fill = "transparent", color = NA),
tern.plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(hjust = 0.5),
tern.axis.line.T = element_line(color = "black", size = 1.2),
tern.axis.line.L = element_line(color = "black", size = 1.2),
tern.axis.line.R = element_line(color = "black", size = 1.2),
tern.panel.grid.major.T = element_blank(),
tern.panel.grid.major.L = element_blank(),
tern.panel.grid.major.R = element_blank(),
tern.panel.grid.minor.T = element_blank(),
tern.panel.grid.minor.L = element_blank(),
tern.panel.grid.minor.R = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm")
)
png(filename = "./Supplementary_materials/supplementary_figures/Comp_glaze_ternary_Ware.png", width = 3600, height = 2400, res=300)
plot(Comp_glaze_ternary_ware_type)
dev.off()
Comp_Glaze_transparent <- filter(Comp_Glaze, `Ware_type` %in% c('Transparent'))
#clean transparent glaze data to ensure their are no N/A values in major elements
detection_limit <- 0.1
replacement_value <- (2/3) * detection_limit
Comp_Glaze_transparent <- Comp_Glaze_transparent %>%
mutate(across(c(MgO, Na2O, FeO, CaO, K2O),
~ ifelse(is.na(.x), replacement_value, .x)))
pc <- prcomp(Comp_Glaze_transparent[,c("PbO", "SiO2", "Al2O3", "Na2O", "MgO", "CaO", "FeO", "K2O")],
center = TRUE,
scale. = TRUE)
pc.dataframe <- as.data.frame(pc$x)
pc.dataframe <- data.frame(pc.dataframe, Ware = Comp_Glaze_transparent$Ware,
Provenance = Comp_Glaze_transparent$Provenance,
Site = Comp_Glaze_transparent$Site,
Sample = Comp_Glaze_transparent$Sample,
Region = Comp_Glaze_transparent$Region)
# Create element loadings scaled for visualization
loadings <- as.data.frame(pc$rotation)
loadings_scaled <- loadings*8
loadings_scaled$Variable <- rownames(loadings)
# Calculate percentage contribution of each PC
total_variance <- sum(pc$sdev^2)  # Total variance (sum of eigenvalues)
pc_contributions <- (pc$sdev^2 / total_variance) * 100
print(pc_contributions)
NAA_pc.dataframe <- pc.dataframe %>%
filter(Provenance %in% c("BUK", "TASH", "SAMK", "TAZ - Group 3"))
Site_pc.dataframe <- pc.dataframe %>%
filter(Site %in% c("Akhsiket", "Dandanakan", "Kuva", "Termez", "Aktobe", "Bektobe",
"Kulan", "Lower Barskhan", "Tamdy", "Taraz", "Laskhar-i Bazar",
"Bust")| Provenance == "N/A")
ellipse_NAA_pc.dataframe <- pc.dataframe %>%
filter(Provenance %in% c("BUK", "TASH"))
ellipse_region_pc.dataframe <- pc.dataframe %>%
filter(Region %in% c("Chach", "Transoxiana"))
ellipse_ware_pc.dataframe <- ellipse_NAA_pc.dataframe %>%
filter(Ware %in% c("Slipware - Samanid", "Slipware - Qarakhanid"))
#plot by paste compositional group with element loadings
PCregion <- ggplot()+
geom_point(data = Site_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Site)) +
geom_point(data = NAA_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Provenance)) +
stat_ellipse(data = ellipse_region_pc.dataframe, aes(x =PC1, y = PC2, group = Region, color = Region))+
theme_minimal() +
labs(x = "PC1 (51.6%)", y = "PC2 (15.4%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_shape_manual(name = "Provenance", values = c(17, 15, 16, 18, 1,2,3,4,5,6,8,9,10,11,12,13,14,
7,19,20,21, 22, 23, 24, 25))+
scale_color_manual(name = "Region", values = c("#f0027f", "#beaed4", "#e78ac3", "#fc8d62",
"#386cb0", "#bf5b17", "#666666", "#7fc97f")) +
theme(legend.position = "right")
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
Comp_Glaze_transparent <- Comp_Glaze_transparent %>%
filter(PbO >= 30)
#clean transparent glaze data to ensure their are no N/A values in major elements
detection_limit <- 0.1
replacement_value <- (2/3) * detection_limit
Comp_Glaze_transparent <- Comp_Glaze_transparent %>%
mutate(across(c(MgO, Na2O, FeO, CaO, K2O),
~ ifelse(is.na(.x), replacement_value, .x)))
pc <- prcomp(Comp_Glaze_transparent[,c("PbO", "SiO2", "Al2O3", "Na2O", "MgO", "CaO", "FeO", "K2O")],
center = TRUE,
scale. = TRUE)
pc.dataframe <- as.data.frame(pc$x)
pc.dataframe <- data.frame(pc.dataframe, Ware = Comp_Glaze_transparent$Ware,
Provenance = Comp_Glaze_transparent$Provenance,
Site = Comp_Glaze_transparent$Site,
Sample = Comp_Glaze_transparent$Sample,
Region = Comp_Glaze_transparent$Region)
# Create element loadings scaled for visualization
loadings <- as.data.frame(pc$rotation)
loadings_scaled <- loadings*8
loadings_scaled$Variable <- rownames(loadings)
# Calculate percentage contribution of each PC
total_variance <- sum(pc$sdev^2)  # Total variance (sum of eigenvalues)
pc_contributions <- (pc$sdev^2 / total_variance) * 100
print(pc_contributions)
NAA_pc.dataframe <- pc.dataframe %>%
filter(Provenance %in% c("BUK", "TASH", "SAMK", "TAZ - Group 3"))
Site_pc.dataframe <- pc.dataframe %>%
filter(Site %in% c("Akhsiket", "Dandanakan", "Kuva", "Termez", "Aktobe", "Bektobe",
"Kulan", "Lower Barskhan", "Tamdy", "Taraz", "Laskhar-i Bazar",
"Bust")| Provenance == "N/A")
ellipse_NAA_pc.dataframe <- pc.dataframe %>%
filter(Provenance %in% c("BUK", "TASH"))
ellipse_region_pc.dataframe <- pc.dataframe %>%
filter(Region %in% c("Chach", "Transoxiana"))
ellipse_ware_pc.dataframe <- ellipse_NAA_pc.dataframe %>%
filter(Ware %in% c("Slipware - Samanid", "Slipware - Qarakhanid"))
#plot by paste compositional group with element loadings
PCregion <- ggplot()+
geom_point(data = Site_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Site)) +
geom_point(data = NAA_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Provenance)) +
stat_ellipse(data = ellipse_region_pc.dataframe, aes(x =PC1, y = PC2, group = Region, color = Region))+
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_shape_manual(name = "Provenance", values = c(17, 15, 16, 18, 1,2,3,4,5,6,8,9,10,11,12,13,14,
7,19,20,21, 22, 23, 24, 25))+
scale_color_manual(name = "Region", values = c("#f0027f", "#beaed4", "#e78ac3", "#fc8d62",
"#386cb0", "#bf5b17", "#666666", "#7fc97f")) +
theme(legend.position = "right")
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
#plot by paste compositional group with element loadings
PCregion <- ggplot()+
geom_point(data = Site_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Site)) +
geom_point(data = NAA_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Provenance)) +
stat_ellipse(data = ellipse_region_pc.dataframe, aes(x =PC1, y = PC2, group = Region, color = Region))+
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_shape_manual(name = "Provenance", values = c(17, 15, 16, 18, 1,2,3,4,5,6,8,9,10,11,12,13,14,
7,19,20,21, 22, 23, 24, 25))+
scale_color_manual(name = "Region", values = c("#f0027f", "#e78ac3", "#beaed4", "#fc8d62",
"#386cb0", "#bf5b17", "#666666", "#7fc97f")) +
theme(legend.position = "right")
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
PCware <- ggplot(pc.dataframe, aes(x = PC1, y = PC2, color = Ware, shape = Ware)) +
geom_point(size=2) +
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
stat_ellipse(data = ellipse_ware_pc.dataframe, aes(x =PC1, y = PC2, group = Ware, color = Ware))+
scale_color_manual(name = "Ware", values = c("#E41A1C", "#999999", "#4DAF4A", "#377EB8", "#984EA3", "#FF7F00")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
PCComp <- ggplot() +
geom_point(data = pc.dataframe, aes(x = PC1, y = PC2, color = "comparative", shape = Ware)) +
geom_point(data = NAA_pc.dataframe, aes(x =PC1, y = PC2, color = Provenance, shape = Ware))+
theme_minimal() +
stat_ellipse(data = ellipse_NAA_pc.dataframe, aes(x =PC1, y = PC2, group = Provenance, color = Provenance))+
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_color_manual(name = "Provenance", values = c("BUK" = "#CC6677",
"SAMK" =  "#882255",
"TASH" = "#44AA99",
"TAZ - Group 3" = "#117733",
"comparative" = "gray")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCComp) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
jpeg(filename = "./Figures/Figure6a.jpg", width = 2400, height = 2000, res=300)
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
dev.off()
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
PCware <- ggplot(pc.dataframe, aes(x = PC1, y = PC2, color = Ware, shape = Ware)) +
geom_point(size=2) +
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
stat_ellipse(data = ellipse_ware_pc.dataframe, aes(x =PC1, y = PC2, group = Ware, color = Ware))+
scale_color_manual(name = "Ware", values = c("#E41A1C", "#999999", "#4DAF4A", "#377EB8", "#984EA3", "#FF7F00")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
#plot by paste compositional group with element loadings
PCregion <- ggplot()+
geom_point(data = Site_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Site)) +
geom_point(data = NAA_pc.dataframe, aes(x = PC1, y = PC2, color = Region, shape = Provenance)) +
stat_ellipse(data = ellipse_region_pc.dataframe, aes(x =PC1, y = PC2, group = Region, color = Region))+
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_shape_manual(name = "Provenance", values = c(17, 15, 16, 18, 1,2,3,4,5,6,8,9,10,11,12,13,14,
7,19,20,21, 22, 23, 24, 25))+
scale_color_manual(name = "Region", values = c("#f0027f", "#e78ac3", "#beaed4", "#fc8d62",
"#386cb0", "#bf5b17", "#666666", "#7fc97f")) +
theme(legend.position = "right")
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
jpeg(filename = "./Figures/Figure6a.jpg", width = 2400, height = 2000, res=300)
print(PCregion) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
dev.off()
PCware <- ggplot(pc.dataframe, aes(x = PC1, y = PC2, color = Ware, shape = Ware)) +
geom_point(size=2) +
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
stat_ellipse(data = ellipse_ware_pc.dataframe, aes(x =PC1, y = PC2, group = Ware, color = Ware))+
scale_color_manual(name = "Ware", values = c("#E41A1C", "#999999", "#4DAF4A", "#377EB8", "#984EA3", "#FF7F00")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
jpeg(filename = "./Figures/Figure6b.jpg", width = 2400, height = 2000, res=300)
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
dev.off()
PCComp <- ggplot() +
geom_point(data = pc.dataframe, aes(x = PC1, y = PC2, color = "comparative", shape = Ware)) +
geom_point(data = NAA_pc.dataframe, aes(x =PC1, y = PC2, color = Provenance, shape = Ware))+
theme_minimal() +
stat_ellipse(data = ellipse_NAA_pc.dataframe, aes(x =PC1, y = PC2, group = Provenance, color = Provenance))+
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_color_manual(name = "Provenance", values = c("BUK" = "#CC6677",
"SAMK" =  "#882255",
"TASH" = "#44AA99",
"TAZ - Group 3" = "#117733",
"comparative" = "gray")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCComp) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
jpeg(filename = "./Figures/Figure6c.jpg", width = 2400, height = 2000, res=300)
print(PCComp) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
dev.off()
PCware <- ggplot(pc.dataframe, aes(x = PC1, y = PC2, color = Ware, shape = Ware)) +
geom_point(size=2) +
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
stat_ellipse(data = ellipse_ware_pc.dataframe, aes(x =PC1, y = PC2, group = Ware, color = Ware))+
scale_color_manual(name = "Ware", values = c("#E41A1C", "#999999", "#4DAF4A", "#377EB8", "#984EA3", "#FF7F00")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
jpeg(filename = "./Figures/Figure6b.jpg", width = 2400, height = 1600, res=300)
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
dev.off()
PCComp <- ggplot() +
geom_point(data = pc.dataframe, aes(x = PC1, y = PC2, color = "comparative", shape = Ware)) +
geom_point(data = NAA_pc.dataframe, aes(x =PC1, y = PC2, color = Provenance, shape = Ware))+
theme_minimal() +
stat_ellipse(data = ellipse_NAA_pc.dataframe, aes(x =PC1, y = PC2, group = Provenance, color = Provenance))+
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
scale_color_manual(name = "Provenance", values = c("BUK" = "#CC6677",
"SAMK" =  "#882255",
"TASH" = "#44AA99",
"TAZ - Group 3" = "#117733",
"comparative" = "gray")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCComp) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
jpeg(filename = "./Figures/Figure6c.jpg", width = 2400, height = 1600, res=300)
print(PCComp) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
dev.off()
jpeg(filename = "./Figures/Figure6b.jpg", width = 2400, height = 1600, res=300)
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
jpeg(filename = "./Figures/Figure6c.jpg", width = 2400, height = 1600, res=300)
print(PCComp) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
dev.off()
jpeg(filename = "./Figures/Figure6b.jpg", width = 2400, height = 1600, res=300)
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))+
geom_segment(data = loadings_scaled, aes(x = 0, y = 0, xend = PC1, yend = PC2), arrow = arrow(length = unit(0.2, "cm")), color = "black") +
geom_text(data = loadings_scaled, aes(x = PC1, y = PC2, label = Variable), hjust = 0.25, vjust = 1.25, size = 5, color = "black")
PCware <- ggplot(pc.dataframe, aes(x = PC1, y = PC2, color = Ware)) +
geom_point(size=2) +
theme_minimal() +
labs(x = "PC1 (43.3%)", y = "PC2 (16.2%)") +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
stat_ellipse(data = ellipse_ware_pc.dataframe, aes(x =PC1, y = PC2, group = Ware, color = Ware))+
scale_color_manual(name = "Ware", values = c("#E41A1C", "#999999", "#4DAF4A", "#377EB8", "#984EA3", "#FF7F00")) +
scale_shape_manual(name = "Ware", values = c(1, 15, 16, 17, 8, 7)) +
theme(legend.position = "right")
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
print(PCware) + theme(axis.line = element_line(color = "black", linewidth = 1, linetype = 1))
